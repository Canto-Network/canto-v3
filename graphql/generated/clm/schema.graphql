"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

type Account {
  """Count user has been liquidated"""
  countLiquidated: Int!

  """Count user has liquidated others"""
  countLiquidator: Int!

  """True if user has ever borrowed"""
  hasBorrowed: Boolean!

  """User ETH address"""
  id: ID!

  """Array of CTokens user is in"""
  tokens(first: Int = 100, orderBy: AccountCToken_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: AccountCToken_filter): [AccountCToken!]!
}

type AccountCToken {
  """Relation to user"""
  account: Account!

  """The value of the borrow index upon users last interaction"""
  accountBorrowIndex: BigDecimal!

  """Block number this asset was updated at in the contract"""
  accrualBlockNumber: Int!

  """CToken balance of the user"""
  cTokenBalance: BigDecimal!

  """True if user is entered, false if they are exited"""
  enteredMarket: Boolean!

  """Concatenation of CToken address and user address"""
  id: ID!

  """Relation to market"""
  market: Market!

  """
  Current borrow balance stored in contract (exclusive of interest since accrualBlockNumber)
  """
  storedBorrowBalance: BigDecimal!

  """Symbol of the cToken"""
  symbol: String!

  """Total amount underlying borrowed, exclusive of interest"""
  totalUnderlyingBorrowed: BigDecimal!

  """Total amount of underling redeemed"""
  totalUnderlyingRedeemed: BigDecimal!

  """Total amount underlying repaid"""
  totalUnderlyingRepaid: BigDecimal!

  """Total amount of underlying supplied"""
  totalUnderlyingSupplied: BigDecimal!

  """Hashes of all user transactions"""
  transactionHashes: [Bytes!]!

  """Times of all user transactions"""
  transactionTimes: [Int!]!
}

input AccountCToken_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  accountBorrowIndex: BigDecimal
  accountBorrowIndex_gt: BigDecimal
  accountBorrowIndex_gte: BigDecimal
  accountBorrowIndex_in: [BigDecimal!]
  accountBorrowIndex_lt: BigDecimal
  accountBorrowIndex_lte: BigDecimal
  accountBorrowIndex_not: BigDecimal
  accountBorrowIndex_not_in: [BigDecimal!]
  account_: Account_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  accrualBlockNumber: Int
  accrualBlockNumber_gt: Int
  accrualBlockNumber_gte: Int
  accrualBlockNumber_in: [Int!]
  accrualBlockNumber_lt: Int
  accrualBlockNumber_lte: Int
  accrualBlockNumber_not: Int
  accrualBlockNumber_not_in: [Int!]
  and: [AccountCToken_filter]
  cTokenBalance: BigDecimal
  cTokenBalance_gt: BigDecimal
  cTokenBalance_gte: BigDecimal
  cTokenBalance_in: [BigDecimal!]
  cTokenBalance_lt: BigDecimal
  cTokenBalance_lte: BigDecimal
  cTokenBalance_not: BigDecimal
  cTokenBalance_not_in: [BigDecimal!]
  enteredMarket: Boolean
  enteredMarket_in: [Boolean!]
  enteredMarket_not: Boolean
  enteredMarket_not_in: [Boolean!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  market: String
  market_: Market_filter
  market_contains: String
  market_contains_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_gt: String
  market_gte: String
  market_in: [String!]
  market_lt: String
  market_lte: String
  market_not: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_not_in: [String!]
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  or: [AccountCToken_filter]
  storedBorrowBalance: BigDecimal
  storedBorrowBalance_gt: BigDecimal
  storedBorrowBalance_gte: BigDecimal
  storedBorrowBalance_in: [BigDecimal!]
  storedBorrowBalance_lt: BigDecimal
  storedBorrowBalance_lte: BigDecimal
  storedBorrowBalance_not: BigDecimal
  storedBorrowBalance_not_in: [BigDecimal!]
  symbol: String
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_not: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  symbol_not_in: [String!]
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  totalUnderlyingBorrowed: BigDecimal
  totalUnderlyingBorrowed_gt: BigDecimal
  totalUnderlyingBorrowed_gte: BigDecimal
  totalUnderlyingBorrowed_in: [BigDecimal!]
  totalUnderlyingBorrowed_lt: BigDecimal
  totalUnderlyingBorrowed_lte: BigDecimal
  totalUnderlyingBorrowed_not: BigDecimal
  totalUnderlyingBorrowed_not_in: [BigDecimal!]
  totalUnderlyingRedeemed: BigDecimal
  totalUnderlyingRedeemed_gt: BigDecimal
  totalUnderlyingRedeemed_gte: BigDecimal
  totalUnderlyingRedeemed_in: [BigDecimal!]
  totalUnderlyingRedeemed_lt: BigDecimal
  totalUnderlyingRedeemed_lte: BigDecimal
  totalUnderlyingRedeemed_not: BigDecimal
  totalUnderlyingRedeemed_not_in: [BigDecimal!]
  totalUnderlyingRepaid: BigDecimal
  totalUnderlyingRepaid_gt: BigDecimal
  totalUnderlyingRepaid_gte: BigDecimal
  totalUnderlyingRepaid_in: [BigDecimal!]
  totalUnderlyingRepaid_lt: BigDecimal
  totalUnderlyingRepaid_lte: BigDecimal
  totalUnderlyingRepaid_not: BigDecimal
  totalUnderlyingRepaid_not_in: [BigDecimal!]
  totalUnderlyingSupplied: BigDecimal
  totalUnderlyingSupplied_gt: BigDecimal
  totalUnderlyingSupplied_gte: BigDecimal
  totalUnderlyingSupplied_in: [BigDecimal!]
  totalUnderlyingSupplied_lt: BigDecimal
  totalUnderlyingSupplied_lte: BigDecimal
  totalUnderlyingSupplied_not: BigDecimal
  totalUnderlyingSupplied_not_in: [BigDecimal!]
  transactionHashes: [Bytes!]
  transactionHashes_contains: [Bytes!]
  transactionHashes_contains_nocase: [Bytes!]
  transactionHashes_not: [Bytes!]
  transactionHashes_not_contains: [Bytes!]
  transactionHashes_not_contains_nocase: [Bytes!]
  transactionTimes: [Int!]
  transactionTimes_contains: [Int!]
  transactionTimes_contains_nocase: [Int!]
  transactionTimes_not: [Int!]
  transactionTimes_not_contains: [Int!]
  transactionTimes_not_contains_nocase: [Int!]
}

enum AccountCToken_orderBy {
  account
  accountBorrowIndex
  account__countLiquidated
  account__countLiquidator
  account__hasBorrowed
  account__id
  accrualBlockNumber
  cTokenBalance
  enteredMarket
  id
  market
  market__accrualBlockNumber
  market__blockTimestamp
  market__borrowAPY
  market__borrowDistributionAPY
  market__borrowIndex
  market__borrowRate
  market__cash
  market__collateralFactor
  market__exchangeRate
  market__id
  market__interestRateModelAddress
  market__name
  market__numberOfBorrowers
  market__numberOfSuppliers
  market__reserveFactor
  market__reserves
  market__supplyAPY
  market__supplyDistributionAPY
  market__supplyRate
  market__symbol
  market__totalBorrows
  market__totalSupply
  market__underlyingAddress
  market__underlyingDecimals
  market__underlyingName
  market__underlyingPrice
  market__underlyingPriceUSD
  market__underlyingSymbol
  storedBorrowBalance
  symbol
  totalUnderlyingBorrowed
  totalUnderlyingRedeemed
  totalUnderlyingRepaid
  totalUnderlyingSupplied
  transactionHashes
  transactionTimes
}

input Account_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  countLiquidated: Int
  countLiquidated_gt: Int
  countLiquidated_gte: Int
  countLiquidated_in: [Int!]
  countLiquidated_lt: Int
  countLiquidated_lte: Int
  countLiquidated_not: Int
  countLiquidated_not_in: [Int!]
  countLiquidator: Int
  countLiquidator_gt: Int
  countLiquidator_gte: Int
  countLiquidator_in: [Int!]
  countLiquidator_lt: Int
  countLiquidator_lte: Int
  countLiquidator_not: Int
  countLiquidator_not_in: [Int!]
  hasBorrowed: Boolean
  hasBorrowed_in: [Boolean!]
  hasBorrowed_not: Boolean
  hasBorrowed_not_in: [Boolean!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Account_filter]
  tokens_: AccountCToken_filter
}

enum Account_orderBy {
  countLiquidated
  countLiquidator
  hasBorrowed
  id
  tokens
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Comptroller {
  """Factor used to determine repayAmount for liquidating"""
  closeFactor: BigInt

  """ID is set to 1"""
  id: ID!

  """The percent bonus liquidators get for liquidating"""
  liquidationIncentive: BigInt

  """Max assets a single user can enter"""
  maxAssets: BigInt

  """Address of price oracle the comptroller uses"""
  priceOracle: Bytes
  totalLiquidityNOTE: BigDecimal!
  totalLiquidityUSD: BigDecimal!
}

type ComptrollerDayData {
  dailyBorrowTxns: BigInt!
  dailyBorrowVolumeNOTE: BigDecimal!
  dailyBorrowVolumeUSD: BigDecimal!
  dailySupplyTxns: BigInt!
  dailySupplyVolumeNOTE: BigDecimal!
  dailySupplyVolumeUSD: BigDecimal!
  date: Int!
  id: ID!
  totalLiquidityNOTE: BigDecimal!
  totalLiquidityUSD: BigDecimal!
}

input ComptrollerDayData_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ComptrollerDayData_filter]
  dailyBorrowTxns: BigInt
  dailyBorrowTxns_gt: BigInt
  dailyBorrowTxns_gte: BigInt
  dailyBorrowTxns_in: [BigInt!]
  dailyBorrowTxns_lt: BigInt
  dailyBorrowTxns_lte: BigInt
  dailyBorrowTxns_not: BigInt
  dailyBorrowTxns_not_in: [BigInt!]
  dailyBorrowVolumeNOTE: BigDecimal
  dailyBorrowVolumeNOTE_gt: BigDecimal
  dailyBorrowVolumeNOTE_gte: BigDecimal
  dailyBorrowVolumeNOTE_in: [BigDecimal!]
  dailyBorrowVolumeNOTE_lt: BigDecimal
  dailyBorrowVolumeNOTE_lte: BigDecimal
  dailyBorrowVolumeNOTE_not: BigDecimal
  dailyBorrowVolumeNOTE_not_in: [BigDecimal!]
  dailyBorrowVolumeUSD: BigDecimal
  dailyBorrowVolumeUSD_gt: BigDecimal
  dailyBorrowVolumeUSD_gte: BigDecimal
  dailyBorrowVolumeUSD_in: [BigDecimal!]
  dailyBorrowVolumeUSD_lt: BigDecimal
  dailyBorrowVolumeUSD_lte: BigDecimal
  dailyBorrowVolumeUSD_not: BigDecimal
  dailyBorrowVolumeUSD_not_in: [BigDecimal!]
  dailySupplyTxns: BigInt
  dailySupplyTxns_gt: BigInt
  dailySupplyTxns_gte: BigInt
  dailySupplyTxns_in: [BigInt!]
  dailySupplyTxns_lt: BigInt
  dailySupplyTxns_lte: BigInt
  dailySupplyTxns_not: BigInt
  dailySupplyTxns_not_in: [BigInt!]
  dailySupplyVolumeNOTE: BigDecimal
  dailySupplyVolumeNOTE_gt: BigDecimal
  dailySupplyVolumeNOTE_gte: BigDecimal
  dailySupplyVolumeNOTE_in: [BigDecimal!]
  dailySupplyVolumeNOTE_lt: BigDecimal
  dailySupplyVolumeNOTE_lte: BigDecimal
  dailySupplyVolumeNOTE_not: BigDecimal
  dailySupplyVolumeNOTE_not_in: [BigDecimal!]
  dailySupplyVolumeUSD: BigDecimal
  dailySupplyVolumeUSD_gt: BigDecimal
  dailySupplyVolumeUSD_gte: BigDecimal
  dailySupplyVolumeUSD_in: [BigDecimal!]
  dailySupplyVolumeUSD_lt: BigDecimal
  dailySupplyVolumeUSD_lte: BigDecimal
  dailySupplyVolumeUSD_not: BigDecimal
  dailySupplyVolumeUSD_not_in: [BigDecimal!]
  date: Int
  date_gt: Int
  date_gte: Int
  date_in: [Int!]
  date_lt: Int
  date_lte: Int
  date_not: Int
  date_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [ComptrollerDayData_filter]
  totalLiquidityNOTE: BigDecimal
  totalLiquidityNOTE_gt: BigDecimal
  totalLiquidityNOTE_gte: BigDecimal
  totalLiquidityNOTE_in: [BigDecimal!]
  totalLiquidityNOTE_lt: BigDecimal
  totalLiquidityNOTE_lte: BigDecimal
  totalLiquidityNOTE_not: BigDecimal
  totalLiquidityNOTE_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_not_in: [BigDecimal!]
}

enum ComptrollerDayData_orderBy {
  dailyBorrowTxns
  dailyBorrowVolumeNOTE
  dailyBorrowVolumeUSD
  dailySupplyTxns
  dailySupplyVolumeNOTE
  dailySupplyVolumeUSD
  date
  id
  totalLiquidityNOTE
  totalLiquidityUSD
}

input Comptroller_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Comptroller_filter]
  closeFactor: BigInt
  closeFactor_gt: BigInt
  closeFactor_gte: BigInt
  closeFactor_in: [BigInt!]
  closeFactor_lt: BigInt
  closeFactor_lte: BigInt
  closeFactor_not: BigInt
  closeFactor_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidationIncentive: BigInt
  liquidationIncentive_gt: BigInt
  liquidationIncentive_gte: BigInt
  liquidationIncentive_in: [BigInt!]
  liquidationIncentive_lt: BigInt
  liquidationIncentive_lte: BigInt
  liquidationIncentive_not: BigInt
  liquidationIncentive_not_in: [BigInt!]
  maxAssets: BigInt
  maxAssets_gt: BigInt
  maxAssets_gte: BigInt
  maxAssets_in: [BigInt!]
  maxAssets_lt: BigInt
  maxAssets_lte: BigInt
  maxAssets_not: BigInt
  maxAssets_not_in: [BigInt!]
  or: [Comptroller_filter]
  priceOracle: Bytes
  priceOracle_contains: Bytes
  priceOracle_gt: Bytes
  priceOracle_gte: Bytes
  priceOracle_in: [Bytes!]
  priceOracle_lt: Bytes
  priceOracle_lte: Bytes
  priceOracle_not: Bytes
  priceOracle_not_contains: Bytes
  priceOracle_not_in: [Bytes!]
  totalLiquidityNOTE: BigDecimal
  totalLiquidityNOTE_gt: BigDecimal
  totalLiquidityNOTE_gte: BigDecimal
  totalLiquidityNOTE_in: [BigDecimal!]
  totalLiquidityNOTE_lt: BigDecimal
  totalLiquidityNOTE_lte: BigDecimal
  totalLiquidityNOTE_not: BigDecimal
  totalLiquidityNOTE_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_not_in: [BigDecimal!]
}

enum Comptroller_orderBy {
  closeFactor
  id
  liquidationIncentive
  maxAssets
  priceOracle
  totalLiquidityNOTE
  totalLiquidityUSD
}

"8 bytes signed integer\n"
scalar Int8

type Market {
  """Block the market is updated to"""
  accrualBlockNumber: Int!

  """Timestamp the market was most recently updated"""
  blockTimestamp: Int!

  """borrow APY"""
  borrowAPY: BigDecimal!

  """borrowDistribution APY"""
  borrowDistributionAPY: BigDecimal!

  """The history of the markets borrow index return (Think S&P 500)"""
  borrowIndex: BigDecimal!

  """Yearly borrow rate. With x blocks per year at 5 s/block"""
  borrowRate: BigDecimal!

  """The cToken contract balance of ERC20 or ETH"""
  cash: BigDecimal!

  """Collateral factor determining how much one can borrow"""
  collateralFactor: BigDecimal!

  """Exchange rate of tokens / cTokens"""
  exchangeRate: BigDecimal!

  """CToken address"""
  id: ID!

  """Address of the interest rate model"""
  interestRateModelAddress: Bytes!

  """Name of the cToken"""
  name: String!

  """Number of borrowers active in the market"""
  numberOfBorrowers: Int!

  """Number of suppliers active in the market"""
  numberOfSuppliers: Int!

  """The factor determining interest that goes to reserves"""
  reserveFactor: BigInt!

  """Reserves stored in the contract"""
  reserves: BigDecimal!

  """supply APY"""
  supplyAPY: BigDecimal!

  """supply distribution APY"""
  supplyDistributionAPY: BigDecimal!

  """Yearly supply rate. With x blocks per year at 5 s/block"""
  supplyRate: BigDecimal!

  """CToken symbol"""
  symbol: String!

  """Borrows in the market"""
  totalBorrows: BigDecimal!

  """CToken supply. CTokens have 8 decimals"""
  totalSupply: BigDecimal!

  """Underlying token address"""
  underlyingAddress: Bytes!

  """Underlying token decimal length"""
  underlyingDecimals: Int!

  """Underlying token name"""
  underlyingName: String!

  """Underlying price of token in ETH (ex. 0.007 DAI)"""
  underlyingPrice: BigDecimal!

  """Underlying token price in USD"""
  underlyingPriceUSD: BigDecimal!

  """Underlying token symbol"""
  underlyingSymbol: String!
}

type MarketDayData {
  dailyBorrowTxns: BigInt!
  dailyBorrowVolumeNOTE: BigDecimal!
  dailyBorrowVolumeUSD: BigDecimal!
  dailySupplyTxns: BigInt!
  dailySupplyVolumeNOTE: BigDecimal!
  dailySupplyVolumeUSD: BigDecimal!
  date: Int!
  id: ID!
  market: Market!
  totalLiquidityNOTE: BigDecimal!
  totalLiquidityUSD: BigDecimal!
}

input MarketDayData_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketDayData_filter]
  dailyBorrowTxns: BigInt
  dailyBorrowTxns_gt: BigInt
  dailyBorrowTxns_gte: BigInt
  dailyBorrowTxns_in: [BigInt!]
  dailyBorrowTxns_lt: BigInt
  dailyBorrowTxns_lte: BigInt
  dailyBorrowTxns_not: BigInt
  dailyBorrowTxns_not_in: [BigInt!]
  dailyBorrowVolumeNOTE: BigDecimal
  dailyBorrowVolumeNOTE_gt: BigDecimal
  dailyBorrowVolumeNOTE_gte: BigDecimal
  dailyBorrowVolumeNOTE_in: [BigDecimal!]
  dailyBorrowVolumeNOTE_lt: BigDecimal
  dailyBorrowVolumeNOTE_lte: BigDecimal
  dailyBorrowVolumeNOTE_not: BigDecimal
  dailyBorrowVolumeNOTE_not_in: [BigDecimal!]
  dailyBorrowVolumeUSD: BigDecimal
  dailyBorrowVolumeUSD_gt: BigDecimal
  dailyBorrowVolumeUSD_gte: BigDecimal
  dailyBorrowVolumeUSD_in: [BigDecimal!]
  dailyBorrowVolumeUSD_lt: BigDecimal
  dailyBorrowVolumeUSD_lte: BigDecimal
  dailyBorrowVolumeUSD_not: BigDecimal
  dailyBorrowVolumeUSD_not_in: [BigDecimal!]
  dailySupplyTxns: BigInt
  dailySupplyTxns_gt: BigInt
  dailySupplyTxns_gte: BigInt
  dailySupplyTxns_in: [BigInt!]
  dailySupplyTxns_lt: BigInt
  dailySupplyTxns_lte: BigInt
  dailySupplyTxns_not: BigInt
  dailySupplyTxns_not_in: [BigInt!]
  dailySupplyVolumeNOTE: BigDecimal
  dailySupplyVolumeNOTE_gt: BigDecimal
  dailySupplyVolumeNOTE_gte: BigDecimal
  dailySupplyVolumeNOTE_in: [BigDecimal!]
  dailySupplyVolumeNOTE_lt: BigDecimal
  dailySupplyVolumeNOTE_lte: BigDecimal
  dailySupplyVolumeNOTE_not: BigDecimal
  dailySupplyVolumeNOTE_not_in: [BigDecimal!]
  dailySupplyVolumeUSD: BigDecimal
  dailySupplyVolumeUSD_gt: BigDecimal
  dailySupplyVolumeUSD_gte: BigDecimal
  dailySupplyVolumeUSD_in: [BigDecimal!]
  dailySupplyVolumeUSD_lt: BigDecimal
  dailySupplyVolumeUSD_lte: BigDecimal
  dailySupplyVolumeUSD_not: BigDecimal
  dailySupplyVolumeUSD_not_in: [BigDecimal!]
  date: Int
  date_gt: Int
  date_gte: Int
  date_in: [Int!]
  date_lt: Int
  date_lte: Int
  date_not: Int
  date_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  market: String
  market_: Market_filter
  market_contains: String
  market_contains_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_gt: String
  market_gte: String
  market_in: [String!]
  market_lt: String
  market_lte: String
  market_not: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_not_in: [String!]
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  or: [MarketDayData_filter]
  totalLiquidityNOTE: BigDecimal
  totalLiquidityNOTE_gt: BigDecimal
  totalLiquidityNOTE_gte: BigDecimal
  totalLiquidityNOTE_in: [BigDecimal!]
  totalLiquidityNOTE_lt: BigDecimal
  totalLiquidityNOTE_lte: BigDecimal
  totalLiquidityNOTE_not: BigDecimal
  totalLiquidityNOTE_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_not_in: [BigDecimal!]
}

enum MarketDayData_orderBy {
  dailyBorrowTxns
  dailyBorrowVolumeNOTE
  dailyBorrowVolumeUSD
  dailySupplyTxns
  dailySupplyVolumeNOTE
  dailySupplyVolumeUSD
  date
  id
  market
  market__accrualBlockNumber
  market__blockTimestamp
  market__borrowAPY
  market__borrowDistributionAPY
  market__borrowIndex
  market__borrowRate
  market__cash
  market__collateralFactor
  market__exchangeRate
  market__id
  market__interestRateModelAddress
  market__name
  market__numberOfBorrowers
  market__numberOfSuppliers
  market__reserveFactor
  market__reserves
  market__supplyAPY
  market__supplyDistributionAPY
  market__supplyRate
  market__symbol
  market__totalBorrows
  market__totalSupply
  market__underlyingAddress
  market__underlyingDecimals
  market__underlyingName
  market__underlyingPrice
  market__underlyingPriceUSD
  market__underlyingSymbol
  totalLiquidityNOTE
  totalLiquidityUSD
}

type MarketHourData {
  hourStartUnix: Int!
  hourlyBorrowTxns: BigInt!
  hourlyBorrowVolumeNOTE: BigDecimal!
  hourlyBorrowVolumeUSD: BigDecimal!
  hourlySupplyTxns: BigInt!
  hourlySupplyVolumeNOTE: BigDecimal!
  hourlySupplyVolumeUSD: BigDecimal!
  id: ID!
  market: Market!
  totalLiquidityNOTE: BigDecimal!
  totalLiquidityUSD: BigDecimal!
}

input MarketHourData_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketHourData_filter]
  hourStartUnix: Int
  hourStartUnix_gt: Int
  hourStartUnix_gte: Int
  hourStartUnix_in: [Int!]
  hourStartUnix_lt: Int
  hourStartUnix_lte: Int
  hourStartUnix_not: Int
  hourStartUnix_not_in: [Int!]
  hourlyBorrowTxns: BigInt
  hourlyBorrowTxns_gt: BigInt
  hourlyBorrowTxns_gte: BigInt
  hourlyBorrowTxns_in: [BigInt!]
  hourlyBorrowTxns_lt: BigInt
  hourlyBorrowTxns_lte: BigInt
  hourlyBorrowTxns_not: BigInt
  hourlyBorrowTxns_not_in: [BigInt!]
  hourlyBorrowVolumeNOTE: BigDecimal
  hourlyBorrowVolumeNOTE_gt: BigDecimal
  hourlyBorrowVolumeNOTE_gte: BigDecimal
  hourlyBorrowVolumeNOTE_in: [BigDecimal!]
  hourlyBorrowVolumeNOTE_lt: BigDecimal
  hourlyBorrowVolumeNOTE_lte: BigDecimal
  hourlyBorrowVolumeNOTE_not: BigDecimal
  hourlyBorrowVolumeNOTE_not_in: [BigDecimal!]
  hourlyBorrowVolumeUSD: BigDecimal
  hourlyBorrowVolumeUSD_gt: BigDecimal
  hourlyBorrowVolumeUSD_gte: BigDecimal
  hourlyBorrowVolumeUSD_in: [BigDecimal!]
  hourlyBorrowVolumeUSD_lt: BigDecimal
  hourlyBorrowVolumeUSD_lte: BigDecimal
  hourlyBorrowVolumeUSD_not: BigDecimal
  hourlyBorrowVolumeUSD_not_in: [BigDecimal!]
  hourlySupplyTxns: BigInt
  hourlySupplyTxns_gt: BigInt
  hourlySupplyTxns_gte: BigInt
  hourlySupplyTxns_in: [BigInt!]
  hourlySupplyTxns_lt: BigInt
  hourlySupplyTxns_lte: BigInt
  hourlySupplyTxns_not: BigInt
  hourlySupplyTxns_not_in: [BigInt!]
  hourlySupplyVolumeNOTE: BigDecimal
  hourlySupplyVolumeNOTE_gt: BigDecimal
  hourlySupplyVolumeNOTE_gte: BigDecimal
  hourlySupplyVolumeNOTE_in: [BigDecimal!]
  hourlySupplyVolumeNOTE_lt: BigDecimal
  hourlySupplyVolumeNOTE_lte: BigDecimal
  hourlySupplyVolumeNOTE_not: BigDecimal
  hourlySupplyVolumeNOTE_not_in: [BigDecimal!]
  hourlySupplyVolumeUSD: BigDecimal
  hourlySupplyVolumeUSD_gt: BigDecimal
  hourlySupplyVolumeUSD_gte: BigDecimal
  hourlySupplyVolumeUSD_in: [BigDecimal!]
  hourlySupplyVolumeUSD_lt: BigDecimal
  hourlySupplyVolumeUSD_lte: BigDecimal
  hourlySupplyVolumeUSD_not: BigDecimal
  hourlySupplyVolumeUSD_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  market: String
  market_: Market_filter
  market_contains: String
  market_contains_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_gt: String
  market_gte: String
  market_in: [String!]
  market_lt: String
  market_lte: String
  market_not: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_not_in: [String!]
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  or: [MarketHourData_filter]
  totalLiquidityNOTE: BigDecimal
  totalLiquidityNOTE_gt: BigDecimal
  totalLiquidityNOTE_gte: BigDecimal
  totalLiquidityNOTE_in: [BigDecimal!]
  totalLiquidityNOTE_lt: BigDecimal
  totalLiquidityNOTE_lte: BigDecimal
  totalLiquidityNOTE_not: BigDecimal
  totalLiquidityNOTE_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_not_in: [BigDecimal!]
}

enum MarketHourData_orderBy {
  hourStartUnix
  hourlyBorrowTxns
  hourlyBorrowVolumeNOTE
  hourlyBorrowVolumeUSD
  hourlySupplyTxns
  hourlySupplyVolumeNOTE
  hourlySupplyVolumeUSD
  id
  market
  market__accrualBlockNumber
  market__blockTimestamp
  market__borrowAPY
  market__borrowDistributionAPY
  market__borrowIndex
  market__borrowRate
  market__cash
  market__collateralFactor
  market__exchangeRate
  market__id
  market__interestRateModelAddress
  market__name
  market__numberOfBorrowers
  market__numberOfSuppliers
  market__reserveFactor
  market__reserves
  market__supplyAPY
  market__supplyDistributionAPY
  market__supplyRate
  market__symbol
  market__totalBorrows
  market__totalSupply
  market__underlyingAddress
  market__underlyingDecimals
  market__underlyingName
  market__underlyingPrice
  market__underlyingPriceUSD
  market__underlyingSymbol
  totalLiquidityNOTE
  totalLiquidityUSD
}

input Market_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  accrualBlockNumber: Int
  accrualBlockNumber_gt: Int
  accrualBlockNumber_gte: Int
  accrualBlockNumber_in: [Int!]
  accrualBlockNumber_lt: Int
  accrualBlockNumber_lte: Int
  accrualBlockNumber_not: Int
  accrualBlockNumber_not_in: [Int!]
  and: [Market_filter]
  blockTimestamp: Int
  blockTimestamp_gt: Int
  blockTimestamp_gte: Int
  blockTimestamp_in: [Int!]
  blockTimestamp_lt: Int
  blockTimestamp_lte: Int
  blockTimestamp_not: Int
  blockTimestamp_not_in: [Int!]
  borrowAPY: BigDecimal
  borrowAPY_gt: BigDecimal
  borrowAPY_gte: BigDecimal
  borrowAPY_in: [BigDecimal!]
  borrowAPY_lt: BigDecimal
  borrowAPY_lte: BigDecimal
  borrowAPY_not: BigDecimal
  borrowAPY_not_in: [BigDecimal!]
  borrowDistributionAPY: BigDecimal
  borrowDistributionAPY_gt: BigDecimal
  borrowDistributionAPY_gte: BigDecimal
  borrowDistributionAPY_in: [BigDecimal!]
  borrowDistributionAPY_lt: BigDecimal
  borrowDistributionAPY_lte: BigDecimal
  borrowDistributionAPY_not: BigDecimal
  borrowDistributionAPY_not_in: [BigDecimal!]
  borrowIndex: BigDecimal
  borrowIndex_gt: BigDecimal
  borrowIndex_gte: BigDecimal
  borrowIndex_in: [BigDecimal!]
  borrowIndex_lt: BigDecimal
  borrowIndex_lte: BigDecimal
  borrowIndex_not: BigDecimal
  borrowIndex_not_in: [BigDecimal!]
  borrowRate: BigDecimal
  borrowRate_gt: BigDecimal
  borrowRate_gte: BigDecimal
  borrowRate_in: [BigDecimal!]
  borrowRate_lt: BigDecimal
  borrowRate_lte: BigDecimal
  borrowRate_not: BigDecimal
  borrowRate_not_in: [BigDecimal!]
  cash: BigDecimal
  cash_gt: BigDecimal
  cash_gte: BigDecimal
  cash_in: [BigDecimal!]
  cash_lt: BigDecimal
  cash_lte: BigDecimal
  cash_not: BigDecimal
  cash_not_in: [BigDecimal!]
  collateralFactor: BigDecimal
  collateralFactor_gt: BigDecimal
  collateralFactor_gte: BigDecimal
  collateralFactor_in: [BigDecimal!]
  collateralFactor_lt: BigDecimal
  collateralFactor_lte: BigDecimal
  collateralFactor_not: BigDecimal
  collateralFactor_not_in: [BigDecimal!]
  exchangeRate: BigDecimal
  exchangeRate_gt: BigDecimal
  exchangeRate_gte: BigDecimal
  exchangeRate_in: [BigDecimal!]
  exchangeRate_lt: BigDecimal
  exchangeRate_lte: BigDecimal
  exchangeRate_not: BigDecimal
  exchangeRate_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  interestRateModelAddress: Bytes
  interestRateModelAddress_contains: Bytes
  interestRateModelAddress_gt: Bytes
  interestRateModelAddress_gte: Bytes
  interestRateModelAddress_in: [Bytes!]
  interestRateModelAddress_lt: Bytes
  interestRateModelAddress_lte: Bytes
  interestRateModelAddress_not: Bytes
  interestRateModelAddress_not_contains: Bytes
  interestRateModelAddress_not_in: [Bytes!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  numberOfBorrowers: Int
  numberOfBorrowers_gt: Int
  numberOfBorrowers_gte: Int
  numberOfBorrowers_in: [Int!]
  numberOfBorrowers_lt: Int
  numberOfBorrowers_lte: Int
  numberOfBorrowers_not: Int
  numberOfBorrowers_not_in: [Int!]
  numberOfSuppliers: Int
  numberOfSuppliers_gt: Int
  numberOfSuppliers_gte: Int
  numberOfSuppliers_in: [Int!]
  numberOfSuppliers_lt: Int
  numberOfSuppliers_lte: Int
  numberOfSuppliers_not: Int
  numberOfSuppliers_not_in: [Int!]
  or: [Market_filter]
  reserveFactor: BigInt
  reserveFactor_gt: BigInt
  reserveFactor_gte: BigInt
  reserveFactor_in: [BigInt!]
  reserveFactor_lt: BigInt
  reserveFactor_lte: BigInt
  reserveFactor_not: BigInt
  reserveFactor_not_in: [BigInt!]
  reserves: BigDecimal
  reserves_gt: BigDecimal
  reserves_gte: BigDecimal
  reserves_in: [BigDecimal!]
  reserves_lt: BigDecimal
  reserves_lte: BigDecimal
  reserves_not: BigDecimal
  reserves_not_in: [BigDecimal!]
  supplyAPY: BigDecimal
  supplyAPY_gt: BigDecimal
  supplyAPY_gte: BigDecimal
  supplyAPY_in: [BigDecimal!]
  supplyAPY_lt: BigDecimal
  supplyAPY_lte: BigDecimal
  supplyAPY_not: BigDecimal
  supplyAPY_not_in: [BigDecimal!]
  supplyDistributionAPY: BigDecimal
  supplyDistributionAPY_gt: BigDecimal
  supplyDistributionAPY_gte: BigDecimal
  supplyDistributionAPY_in: [BigDecimal!]
  supplyDistributionAPY_lt: BigDecimal
  supplyDistributionAPY_lte: BigDecimal
  supplyDistributionAPY_not: BigDecimal
  supplyDistributionAPY_not_in: [BigDecimal!]
  supplyRate: BigDecimal
  supplyRate_gt: BigDecimal
  supplyRate_gte: BigDecimal
  supplyRate_in: [BigDecimal!]
  supplyRate_lt: BigDecimal
  supplyRate_lte: BigDecimal
  supplyRate_not: BigDecimal
  supplyRate_not_in: [BigDecimal!]
  symbol: String
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_not: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  symbol_not_in: [String!]
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  totalBorrows: BigDecimal
  totalBorrows_gt: BigDecimal
  totalBorrows_gte: BigDecimal
  totalBorrows_in: [BigDecimal!]
  totalBorrows_lt: BigDecimal
  totalBorrows_lte: BigDecimal
  totalBorrows_not: BigDecimal
  totalBorrows_not_in: [BigDecimal!]
  totalSupply: BigDecimal
  totalSupply_gt: BigDecimal
  totalSupply_gte: BigDecimal
  totalSupply_in: [BigDecimal!]
  totalSupply_lt: BigDecimal
  totalSupply_lte: BigDecimal
  totalSupply_not: BigDecimal
  totalSupply_not_in: [BigDecimal!]
  underlyingAddress: Bytes
  underlyingAddress_contains: Bytes
  underlyingAddress_gt: Bytes
  underlyingAddress_gte: Bytes
  underlyingAddress_in: [Bytes!]
  underlyingAddress_lt: Bytes
  underlyingAddress_lte: Bytes
  underlyingAddress_not: Bytes
  underlyingAddress_not_contains: Bytes
  underlyingAddress_not_in: [Bytes!]
  underlyingDecimals: Int
  underlyingDecimals_gt: Int
  underlyingDecimals_gte: Int
  underlyingDecimals_in: [Int!]
  underlyingDecimals_lt: Int
  underlyingDecimals_lte: Int
  underlyingDecimals_not: Int
  underlyingDecimals_not_in: [Int!]
  underlyingName: String
  underlyingName_contains: String
  underlyingName_contains_nocase: String
  underlyingName_ends_with: String
  underlyingName_ends_with_nocase: String
  underlyingName_gt: String
  underlyingName_gte: String
  underlyingName_in: [String!]
  underlyingName_lt: String
  underlyingName_lte: String
  underlyingName_not: String
  underlyingName_not_contains: String
  underlyingName_not_contains_nocase: String
  underlyingName_not_ends_with: String
  underlyingName_not_ends_with_nocase: String
  underlyingName_not_in: [String!]
  underlyingName_not_starts_with: String
  underlyingName_not_starts_with_nocase: String
  underlyingName_starts_with: String
  underlyingName_starts_with_nocase: String
  underlyingPrice: BigDecimal
  underlyingPriceUSD: BigDecimal
  underlyingPriceUSD_gt: BigDecimal
  underlyingPriceUSD_gte: BigDecimal
  underlyingPriceUSD_in: [BigDecimal!]
  underlyingPriceUSD_lt: BigDecimal
  underlyingPriceUSD_lte: BigDecimal
  underlyingPriceUSD_not: BigDecimal
  underlyingPriceUSD_not_in: [BigDecimal!]
  underlyingPrice_gt: BigDecimal
  underlyingPrice_gte: BigDecimal
  underlyingPrice_in: [BigDecimal!]
  underlyingPrice_lt: BigDecimal
  underlyingPrice_lte: BigDecimal
  underlyingPrice_not: BigDecimal
  underlyingPrice_not_in: [BigDecimal!]
  underlyingSymbol: String
  underlyingSymbol_contains: String
  underlyingSymbol_contains_nocase: String
  underlyingSymbol_ends_with: String
  underlyingSymbol_ends_with_nocase: String
  underlyingSymbol_gt: String
  underlyingSymbol_gte: String
  underlyingSymbol_in: [String!]
  underlyingSymbol_lt: String
  underlyingSymbol_lte: String
  underlyingSymbol_not: String
  underlyingSymbol_not_contains: String
  underlyingSymbol_not_contains_nocase: String
  underlyingSymbol_not_ends_with: String
  underlyingSymbol_not_ends_with_nocase: String
  underlyingSymbol_not_in: [String!]
  underlyingSymbol_not_starts_with: String
  underlyingSymbol_not_starts_with_nocase: String
  underlyingSymbol_starts_with: String
  underlyingSymbol_starts_with_nocase: String
}

enum Market_orderBy {
  accrualBlockNumber
  blockTimestamp
  borrowAPY
  borrowDistributionAPY
  borrowIndex
  borrowRate
  cash
  collateralFactor
  exchangeRate
  id
  interestRateModelAddress
  name
  numberOfBorrowers
  numberOfSuppliers
  reserveFactor
  reserves
  supplyAPY
  supplyDistributionAPY
  supplyRate
  symbol
  totalBorrows
  totalSupply
  underlyingAddress
  underlyingDecimals
  underlyingName
  underlyingPrice
  underlyingPriceUSD
  underlyingSymbol
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  account(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accountCToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountCToken
  accountCTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AccountCToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AccountCToken_filter
  ): [AccountCToken!]!
  accounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Account_filter
  ): [Account!]!
  comptroller(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Comptroller
  comptrollerDayData(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ComptrollerDayData
  comptrollerDayDatas(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ComptrollerDayData_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ComptrollerDayData_filter
  ): [ComptrollerDayData!]!
  comptrollers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Comptroller_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Comptroller_filter
  ): [Comptroller!]!
  market(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  marketDayData(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketDayData
  marketDayDatas(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MarketDayData_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MarketDayData_filter
  ): [MarketDayData!]!
  marketHourData(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketHourData
  marketHourDatas(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MarketHourData_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MarketHourData_filter
  ): [MarketHourData!]!
  markets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Market_filter
  ): [Market!]!
}

type Subscription {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  account(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accountCToken(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountCToken
  accountCTokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AccountCToken_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AccountCToken_filter
  ): [AccountCToken!]!
  accounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Account_filter
  ): [Account!]!
  comptroller(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Comptroller
  comptrollerDayData(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ComptrollerDayData
  comptrollerDayDatas(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ComptrollerDayData_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ComptrollerDayData_filter
  ): [ComptrollerDayData!]!
  comptrollers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Comptroller_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Comptroller_filter
  ): [Comptroller!]!
  market(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  marketDayData(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketDayData
  marketDayDatas(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MarketDayData_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MarketDayData_filter
  ): [MarketDayData!]!
  marketHourData(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketHourData
  marketHourDatas(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: MarketHourData_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: MarketHourData_filter
  ): [MarketHourData!]!
  markets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Market_filter
  ): [Market!]!
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}